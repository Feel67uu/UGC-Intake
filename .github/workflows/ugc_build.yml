name: UGC Build
on:
  repository_dispatch:
    types: [ugc_build]
  workflow_dispatch:
    inputs:
      job_id:
        description: "jobs/<ID>.json (например: ugc-20250908-123456-789)"
        required: true
        default: ""

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract inputs
        id: inp
        run: |
          if [ -n "${{ github.event.inputs.job_id }}" ]; then
            echo "job_id=${{ github.event.inputs.job_id }}" >> $GITHUB_OUTPUT
          else
            echo "job_id=$(jq -r '.client_payload.job_id' $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT
          fi

      - name: Load job json (safe)
        run: |
          FILE="jobs/${{ steps.inp.outputs.job_id }}.json"
          echo "Using job file: $FILE"
          test -f "$FILE" || (echo "job file not found: $FILE"; exit 1)
          jq -r '.payload.text // ""' "$FILE" > /tmp/text.txt
          jq -r '.payload.media[]? | "\(.type) \(.file_id)"' "$FILE" > /tmp/media.list || true
          echo "DRAFT_CHAT=${{ secrets.TG_DRAFT_CHAT_ID }}" >> $GITHUB_ENV
          echo "---- job summary ----"
          jq '{job_id:.job_id, status:.status, city:.city, inbox_message_id:.inbox_message_id, media_count:(.payload.media|length)}' "$FILE" || true
          echo "---------------------"

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg imagemagick jq curl python3

      - name: Download media from Telegram (via INBOX bot)
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN_INBOX }}
        run: |
          mkdir -p work/in work/out
          i=0
          > /tmp/downloaded.list
          if [ -s /tmp/media.list ]; then
            while read -r TYPE ID; do
              [ -n "$ID" ] || continue
              FP=$(curl -s "https://api.telegram.org/bot${TG_BOT_TOKEN}/getFile?file_id=$ID" | jq -r '.result.file_path')
              if [ "$FP" = "null" ] || [ -z "$FP" ]; then
                echo "WARN: getFile returned empty file_path for $ID" >&2
                continue
              fi
              URL="https://api.telegram.org/file/bot${TG_BOT_TOKEN}/${FP}"
              EXT="${FP##*.}"
              SRC="work/in/${i}.${EXT}"
              echo "↓ $TYPE -> $SRC"
              curl -s -L -o "$SRC" "$URL"
              if [ ! -s "$SRC" ]; then
                echo "WARN: downloaded file is empty: $SRC" >&2
                continue
              fi
              echo "$TYPE $SRC" >> /tmp/downloaded.list
              i=$((i+1))
            done < /tmp/media.list
          fi
          echo "Downloaded count: $(wc -l < /tmp/downloaded.list || echo 0)"

      - name: Simple overlays (demo)
        run: |
          mkdir -p work/out
          > /tmp/out.list
          if [ -s /tmp/downloaded.list ]; then
            while read -r TYPE SRC; do
              if [ "$TYPE" = "photo" ]; then
                DST="work/out/$(basename "${SRC%.*}").jpg"
                convert "$SRC" -gravity south \
                  -fill white -undercolor "#00000080" -pointsize 36 \
                  -annotate +0+20 "ПроКис СВЕЖАК" "$DST"
                echo "photo $DST" >> /tmp/out.list
              else
                DST="work/out/$(basename "${SRC%.*}").mp4"
                ffmpeg -y -i "$SRC" \
                  -vf "drawtext=text='ПроКис СВЕЖАК':fontcolor=white:box=1:boxcolor=black@0.5:boxborderw=10:fontsize=28:x=(w-tw)/2:y=h-80" \
                  -c:a copy "$DST"
                echo "video $DST" >> /tmp/out.list
              fi
            done < /tmp/downloaded.list
          fi
          echo "Prepared outputs: $(wc -l < /tmp/out.list || echo 0)"

      - name: Send to DRAFT as album or single (via DRAFT bot)
        id: send
        shell: bash
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN_DRAFT }}
        run: |
          CHAT="$DRAFT_CHAT"
          TEXT="$(cat /tmp/text.txt || true)"
          COUNT=$(wc -l < /tmp/out.list 2>/dev/null || echo 0)

          : > /tmp/draft_mid.txt

          if [ "$COUNT" -gt 1 ]; then
            MEDIA_JSON=$(python3 - <<'PY'
import json, sys
text = open('/tmp/text.txt','r',encoding='utf-8').read()
items = []
with open('/tmp/out.list','r',encoding='utf-8') as f:
    for idx,line in enumerate(f, start=1):
        typ, path = line.strip().split(' ', 1)
        t = 'photo' if typ == 'photo' else 'video'
        it = {'type': t, 'media': f'attach://f{idx}'}
        if idx == 1 and text.strip():
            it['caption'] = text
        items.append(it)
print(json.dumps(items, ensure_ascii=False))
PY
)
            declare -a FILE_ARGS=()
            i=1
            while read -r TYPE PATH; do
              FILE_ARGS+=(-F "f${i}=@${PATH}")
              i=$((i+1))
            done < /tmp/out.list

            echo "Sending album of $COUNT items to draft chat $CHAT"
            curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMediaGroup" \
              -F chat_id="$CHAT" \
              -F "media=$MEDIA_JSON" \
              "${FILE_ARGS[@]}" | jq -r '.[0].message_id // empty' > /tmp/draft_mid.txt || true

          else
            read -r TYPE PATH < /tmp/out.list || true
            if [ "$TYPE" = "photo" ]; then
              echo "Sending single photo to draft chat $CHAT"
              curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendPhoto" \
                -F chat_id="$CHAT" -F caption="$TEXT" -F photo="@$PATH" | jq -r '.result.message_id // empty' > /tmp/draft_mid.txt || true
            elif [ "$TYPE" = "video" ]; then
              echo "Sending single video to draft chat $CHAT"
              curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendVideo" \
                -F chat_id="$CHAT" -F caption="$TEXT" -F video="@$PATH" | jq -r '.result.message_id // empty' > /tmp/draft_mid.txt || true
            else
              echo "Nothing to send."
            fi
          fi

          DRAFT_MID="$(cat /tmp/draft_mid.txt 2>/dev/null || echo)"
          echo "draft_mid=$DRAFT_MID" >> $GITHUB_OUTPUT
          echo "Draft message id: $DRAFT_MID"

      - name: Update job status to ready + store draft message id
        run: |
          FILE="jobs/${{ steps.inp.outputs.job_id }}.json"
          DRAFT_MID='${{ steps.send.outputs.draft_mid }}'
          jq --arg mid "$DRAFT_MID" '.status="ready" | .draft_message_id=$mid | .updated_at=(now|todate)' \
            "$FILE" > /tmp/job.json
          mv /tmp/job.json "$FILE"
          git add "$FILE"
          git commit -m "UGC ready: ${{ steps.inp.outputs.job_id }}" || true
          git push
