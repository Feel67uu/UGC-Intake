name: UGC Build
on:
  repository_dispatch:
    types: [ugc_build]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract inputs
        id: inp
        run: |
          echo "job_id=$(jq -r '.client_payload.job_id' $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT

      - name: Load job json (safe)
        run: |
          FILE="jobs/${{ steps.inp.outputs.job_id }}.json"
          test -f "$FILE" || (echo "job file not found: $FILE"; exit 1)
          jq -r '.payload.text // ""' "$FILE" > /tmp/text.txt
          jq -r '.payload.media[]? | "\(.type) \(.file_id)"' "$FILE" > /tmp/media.list || true
          echo "DRAFT_CHAT=${{ secrets.TG_DRAFT_CHAT_ID }}" >> $GITHUB_ENV

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg imagemagick jq curl python3

      - name: Download media from Telegram
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN_INBOX }}
        run: |
          mkdir -p work/in work/out
          > /tmp/downloaded.list
          i=0
          if [ -s /tmp/media.list ]; then
            while read -r TYPE ID; do
              [ -n "$ID" ] || continue
              FP=$(curl -s "https://api.telegram.org/bot${TG_BOT_TOKEN}/getFile?file_id=$ID" | jq -r '.result.file_path')
              URL="https://api.telegram.org/file/bot${TG_BOT_TOKEN}/${FP}"
              EXT="${FP##*.}"
              SRC="work/in/${i}.${EXT}"
              curl -s -L -o "$SRC" "$URL"
              echo "$TYPE $SRC" >> /tmp/downloaded.list
              i=$((i+1))
            done < /tmp/media.list
          fi

      - name: Simple overlays (demo)
        run: |
          mkdir -p work/out
          > /tmp/out.list
          if [ -s /tmp/downloaded.list ]; then
            while read -r TYPE SRC; do
              if [ "$TYPE" = "photo" ]; then
                DST="work/out/$(basename "${SRC%.*}").jpg"
                convert "$SRC" -gravity south -fill white -undercolor "#00000080" -pointsize 36 -annotate +0+20 "ПроКис СВЕЖАК" "$DST"
                echo "photo $DST" >> /tmp/out.list
              else
                DST="work/out/$(basename "${SRC%.*}").mp4"
                ffmpeg -y -i "$SRC" -vf "drawtext=text='ПроКис СВЕЖАК':fontcolor=white:box=1:boxcolor=black@0.5:boxborderw=10:fontsize=28:x=(w-tw)/2:y=h-80" -c:a copy "$DST"
                echo "video $DST" >> /tmp/out.list
              fi
            done < /tmp/downloaded.list
          fi

      - name: Build media JSON
        run: |
          python3 - <<'PY'
          import json, os
          text = ''
          if os.path.exists('/tmp/text.txt'):
            with open('/tmp/text.txt','r',encoding='utf-8') as f: text = f.read().strip()
          lines = []
          if os.path.exists('/tmp/out.list'):
            with open('/tmp/out.list','r',encoding='utf-8') as f:
              for line in f:
                p = line.strip().split(' ',1)
                if len(p)==2: lines.append((p[0], p[1]))
          items = []
          for i,(typ,path) in enumerate(lines, start=1):
            t = 'photo' if typ=='photo' else 'video'
            it = {'type': t, 'media': f'attach://f{i}'}
            if i==1 and text: it['caption'] = text
            items.append(it)
          with open('/tmp/media.json','w',encoding='utf-8') as f:
            f.write(json.dumps(items, ensure_ascii=False))
          print("media.json bytes:", os.path.getsize('/tmp/media.json'))
          PY

      - name: Normalize line endings (CRLF→LF)
        run: |
          for f in /tmp/text.txt /tmp/media.list /tmp/downloaded.list /tmp/out.list /tmp/media.json; do
            [ -f "$f" ] && sed -i 's/\r$//' "$f" || true
          done

      - name: Send to DRAFT as album or single (with keyboard)
        shell: bash
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN_DRAFT }}
        run: |
          set -euo pipefail
          CHAT="$DRAFT_CHAT"
          TEXT="$(cat /tmp/text.txt 2>/dev/null || true)"
          COUNT=$(wc -l < /tmp/out.list 2>/dev/null || echo 0)

          KBD=$(jq -cn --arg id "${{ steps.inp.outputs.job_id }}" \
            '{inline_keyboard:[
              [{"text":"Опубликовать","callback_data":("act=pub&id="+$id)},
               {"text":"Пересобрать","callback_data":("act=rb&id="+$id)}],
              [{"text":"Удалить","callback_data":("act=del&id="+$id)}]
            ]}')

          FIRST_ID=""
          if [ "$COUNT" -gt 1 ]; then
            MEDIA_JSON="$(cat /tmp/media.json)"
            FILE_ARGS=()
            i=1
            while IFS=' ' read -r TYPE FPATH; do
              FILE_ARGS+=(-F "f${i}=@${FPATH}")
              i=$((i+1))
            done < /tmp/out.list

            # shellcheck disable=SC2068
            curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMediaGroup" \
              -F chat_id="$CHAT" -F "media=$MEDIA_JSON" ${FILE_ARGS[@]} > /tmp/resp.json

            # В sendMediaGroup результат лежит в .result[0]
            FIRST_ID="$(jq -r '.result[0].message_id // empty' /tmp/resp.json)"
            if [ -z "$FIRST_ID" ]; then
              echo "sendMediaGroup failed, response:"; cat /tmp/resp.json; exit 1
            fi
          else
            if read -r TYPE FPATH < /tmp/out.list; then
              if [ "${TYPE}" = "photo" ]; then
                curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendPhoto" \
                  -F chat_id="$CHAT" -F caption="$TEXT" -F photo="@$FPATH" > /tmp/resp.json
              elif [ "${TYPE}" = "video" ]; then
                curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendVideo" \
                  -F chat_id="$CHAT" -F caption="$TEXT" -F video="@$FPATH" > /tmp/resp.json
              else
                echo "Nothing to send." ; exit 0
              fi
              FIRST_ID="$(jq -r '.result.message_id // empty' /tmp/resp.json)"
              if [ -z "$FIRST_ID" ]; then
                echo "sendPhoto/Video failed, response:"; cat /tmp/resp.json; exit 1
              fi
            else
              echo "Nothing to send." ; exit 0
            fi
          fi

          # Сервисное сообщение с кнопками (реплаем на пост)
          curl -sS -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
            -H 'content-type: application/json' \
            -d "$(jq -cn --arg chat "$CHAT" --arg txt "Черновик готов. Что дальше?" --arg mid "$FIRST_ID" --argjson kb "$KBD" \
                  '{chat_id:$chat, text:$txt, reply_to_message_id:($mid|tonumber), reply_markup:$kb}')"
